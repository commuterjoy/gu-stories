
def listLength2(list: List[_]): Int = {

  def listLength2Helper(list: List[_], len: Int): Int = {
    if (list == Nil) len
    else listLength2Helper(list.tail, len + 1)
  }

  listLength2Helper(list, 0)

}

var list1 = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
var list2 = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
1 to 2 foreach( x => list2 = list2 ++ list2 )

//println( listLength2( list1 ) )
//println( listLength2( list2 ) )

// tail recursion 
def foo(page: Int = 1, items: List[_] = List()): List[_] = {

	val bar = List(1,2,3) ::: items
	
	if ( page == 5) bar
	else foo(page + 1, bar)
}


println(foo().length)
println(foo())

